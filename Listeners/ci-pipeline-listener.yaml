---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-account
  namespace: tekton-pipelines
secrets:
  - name: regcred
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: allow-control-of-basic-kubernetes-resources
  namespace: tekton-pipelines
rules:
  - apiGroups:
      - ""
      - "apps"
      - "deploy"
      - "extensions"
      - "networking.k8s.io" #ingress object zit in extensions en networking.k8s.io
    resources:
      - configmaps
      - clusterroles
      - clusterrolebindings
      - deployments
      - deployments.apps
      - ingresses
      - namespaces
      - pods
      - roles
      - rolebindings
      - secrets
      - services
    verbs:
      - list
      - watch
      - get
      - create
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: allow-control-of-istio-resources
  namespace: tekton-pipelines
rules:
  - apiGroups:
      - "networking.istio.io"
      - "rbac.istio.io"
    resources:
      - destinationrules
      - envoryfilters
      - gateways
      - serviceentries
      - servicerolebindings
      - serviceroles
      - sidecars
      - virtualservices
    verbs:
      - list
      - watch
      - get
      - create
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: allow-control-of-tekton-resources
  namespace: tekton-pipelines
rules:
  - apiGroups:
      - "tekton.dev"
      - "triggers.tekton.dev"
    resources:
      - clustertasks
      - clustertriggerbindings
      - conditions
      - eventlisteners
      - pipelineresources
      - pipelineruns
      - pipelines
      - taskruns
      - tasks
      - triggerbindings
      - triggertemplates
    verbs:
      - list
      - watch
      - get
      - create
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: allow-control-of-basic-kubernetes-resources-binding
  namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: allow-control-of-basic-kubernetes-resources
subjects:
  - kind: ServiceAccount
    name: tekton-account
    namespace: tekton-pipelines
  - kind: ServiceAccount
    name: default
    namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: allow-control-of-istio-resources-binding
  namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: allow-control-of-istio-resources-resources
subjects:
  - kind: ServiceAccount
    name: tekton-account
    namespace: tekton-pipelines
  - kind: ServiceAccount
    name: default
    namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: allow-control-of-tekton-resources-binding
  namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: allow-control-of-tekton-resources-resources
subjects:
  - kind: ServiceAccount
    name: tekton-account
    namespace: tekton-pipelines
  - kind: ServiceAccount
    name: default
    namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: default-admin
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
  apiVersion: rbac.authorization.k8s.io/v1
subjects:
  - kind: ServiceAccount
    name: tekton-account
    namespace: tekton-pipelines
  - kind: ServiceAccount
    name: default
    namespace: tekton-pipelines
# this one is needed to create new pods from inside a pod
---
kind: ClusterRoleBinding
metadata:
  name: read-configmap
  #
subjects:
- kind: User
  name: dave # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ci-pipeline-claim
  namespace: tekton-pipelines
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: .5Gi
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: ci-template
  namespace: tekton-pipelines
spec:
  params:
  - name: revision
    description: The git revision
    default: master
  - name: repo-full-name
    description: The git repository url
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: go-ci-pipeline-
    spec:
      serviceAccountName: tekton-account
      workspaces:
        - name: workspace
          persistentVolumeClaim:
            claimName: ci-pipeline-claim
      pipelineRef:
        name: go-ci-pipeline
      params:
      - name: revision
        value: $(params.revision)
      - name: repo-full-name
        value: $(params.repo-full-name)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: ci-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: revision
    value: $(body.head_commit.id)
  - name: repo-full-name
    value: $(body.repository.full_name)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: ci-pipeline-listener
  namespace: tekton-pipelines
spec:
  serviceAccountName: tekton-account
  triggers:
    - name: foo-trig
      interceptors:
        - github:
            eventTypes:
              - push
      bindings:
        - name: ci-binding
      template:
        name: ci-template
---
apiVersion: v1
kind: Service
metadata:
  name: github-event-listener
  namespace: tekton-pipelines
spec:
  selector:
    eventlistener: ci-pipeline-listener
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: event-listeners-ingress
  namespace: tekton-pipelines
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: ingress-nginx.llocal.host
      http:
        paths:
          - path: /ci-pipeline
            backend: 
              serviceName: el-ci-pipeline-listener
              servicePort: 8080